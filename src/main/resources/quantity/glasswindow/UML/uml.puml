@startuml
skinparam classAttributeIconSize 0
!pragma layout smetana

interface IDataBase<<interface>>{
    +getObject(String, String[]):Model
    +deleteObject(String):void
    +deleteObject(Model):void
    +insertObject(Model):void

}
interface IAdditionalInfo <<interface>>{
    +getType():Enum
}

Agency ..|> IDataBase
class Agency {
    - candidateList:ArrayList<Candidate>
    - companyList:ArrayList<Company>
    - jobPostList:ArrayList<JobPost>
    - interviewList:ArrayList<Interview>
    - {static}single_instance:Agency
    - Agency()
    + {static}create():Agency
    + createCandidate(String,String,Gender,String,String,Scholarship,Specialty,Branch,int):Candidate
    + createCompany(String,String,String,String,Branch,ArrayList<String>):Company
    + createJobPost(String,Branch,float,Status,String,String,ArrayList<String>,Scholarship,Specialty):JobPost
    + createInterview(String, Date, String, String, String):Interview
    + getCandidateList():ArrayList<Candidate>
    + getCompanyList():ArrayList<Company>
    + getJobPostList():ArrayList<JobPost>
    + getInterviewList():ArrayList<Interview>
    - addCandidate(Candidate):void
    - addCompany(Company):void
    - addJobPost(JobPost):void
    - addInterview(Interview):void
    - removeCandidate(String):void
    - removeCompany(String):void
    - removeJobPost(String):void
    - removeInterview(String):void
    - removeCandidate(Candidate):void
    - removeCompany(Company) void
    - removeJobPost(JobPost):void
    - removeInterview(Interview):void
    + setModels(ArrayList<Model>):void
    - getModels():ArrayList<Model>
    + getObject(String):Model
    + deleteObject(String):void
    + deleteObject(Model):void
    + insertObject(Model):void
    + getObjectList(String, HashMap<String, Object>):ArrayList<Model>
    + gerObjectListIDs(String, HashMap<String, Object>):ArrayList<String>
    - filterList(HashMap<String, Object>, ArrayList<Model>):ArrayList<Model>
    + getQualifiedJobPostList (Candidate):ArrayList<JobPost>
    + getAppliances(String, int):ArrayList<Candidate>
    + getInterviewsMonth (String,int):ArrayList<ArrayList<Interview>>
    + getCompanyInterviews(Company):ArrayList<ArrayList<Interview>>
    + Model getModelWithID(String):Model
    + modelExists(String):boolean
    + initTestData():void
}
class Model<<abstract>>{
    #id:String
    +Model(String)
    +getId():String
    +getType():String
    +setId(String):void
}

class Candidate extends Model{
    -String name
    -gender: Gender
    -address:String
    -phone:String
    -scholarship:Scholarship
    -specialty: Specialty
    -sector:Branch
    -additionalInfo:ArrayList<IAdditionalInfo>
    +Candidate(String,String,Gender,String,String,Scholarship,Specialty,Branch,int)
    +getName():String
    +setName():void
    +getGender():Gender
    +setGender():void
    +getAddress():String
    +setAddress():void
    +getPhone():String
    +setPhone():void
    +getScholarship():Scholarship
    +setScholarship():void
    +getSpecialty():Specialty
    +setSpecialty():void
    +getSector():Branch
    +setSector():void
    +setYearsOfExp(int):void
    +getYearsOfExp():int
    +getAdditionalInfo():ArrayList<IAdditionalInfo>
    +setId(String):void
    +addAdditionalInfo(IAdditionalInfo):void
    -dateValidationID(String):boolean
    -genderValidationID(String):boolean
    -phoneValidation(String):boolean
}

class Company extends Model{
    -name:String
    -address:String
    -phoneList:ArrayList<String>
    -sector:Branch
    -jobPostList:ArrayList<JobPost>
    +Company(String,String,String,String,Branch,ArrayList<String>)
    +getName() :String
    +setName(String):void
    +getAddress():String
    +setAddress(String):void
    +getPhone():String
    +setPhone(String):void
    +getSector():Branch
    +setSector(Branch):void
    +getJobPostList():ArrayList<JobPost>
    +addJobPostToList(JobPost):void
    +setJobPostList(ArrayList<JobPost>):void
    +deleteNode():void
    -validatePhone(String):boolean
}


class Interview extends Model{
    -date:Date
    -candidate:String
    -company:String
    -jobPost:String
    +Interview(String, Date, String, String, String)
    +getDate():Date
    +setDate(Date):void
    +getCandidate():String
    +setCandidate(String):void
    +getCompany():String
    +setCompany(String):void
    +getJobPost():String
    +setJobPost(String):void
    -validateDate(Date):boolean
}

class JobPost extends Model{
    -branch:Branch
    -salary:float
    -status:Status
    -description:String
    -company:String
    -interviewList:ArrayList<String>
    -scholarship:Scholarship
    -specialty:Specialty
    +JobPost(String,Branch,float,Status,String,String,ArrayList<String>,Scholarship,Specialty)
    +getSpecialty():Specialty
    +setSpecialty(Specialty):void
    +getScholarship():Scholarship
    +setScholarship(Scholarship) :void
    +getBranch():Branch
    +setBranch(Branch):void
    +getSalary():float
    +setSalary(float):void
    +getStatus():Status
    +setStatus(Status):void
    +getDescription():String
    +setDescription(String):void
    +getCompany():String
    +setCompany(String):void
    +getInterviewList() :ArrayList<String>
    +setInterviewList(ArrayList<String>):void
    +addInterview(String):void
    deleteNode():void
}

class InfoDeveloper implements IAdditionalInfo{
    -languages:ArrayList<ProgrammingLang>
    +InfoDeveloper(ArrayList<ProgrammingLang>)
    +getLanguages():ArrayList<ProgrammingLang>
    +setLanguages(ArrayList<ProgrammingLang> languages):void
    +addLanguage(ProgrammingLang newLang):void
    +removeLanguage(ProgrammingLang lang):void
    +getType():Enum<Specialty>
}

class InfoDoctor implements IAdditionalInfo{
    -specialization:DoctorSpec
    +InfoDoctor(DoctorSpec)
    +getSpecialization():DoctorSpec
    +setSpecialization(DoctorSpec specialization):void
    +getType():Enum<Specialty>
}

class InfoEngineer implements IAdditionalInfo{
    -specialization:EngineerSpec
    +InfoEngineer(EngineerSpec)
    +getSpecialization():EngineerSpec
    +setSpecialization(EngineerSpec):void
    +getType() :Enum<Specialty>
}

class InfoHealth{
    -hasCertificate:boolean
    +InfoHealth(boolean)
    +hasCertificate():boolean
    +setCertificate(boolean):void
    +getType():Enum<Branch>
}
class InfoTourism{
    -hasLicence:boolean
    +InfoTourism(boolean)
    +hasLicence:boolean():boolean
    +setLicence(boolean):void
    +getType():Enum<Branch>
}

class InfoTranslator{
    -langs:ArrayList<Languages>
    +InfoTranslator(ArrayList<Languages>)
    +getLangs():ArrayList<Languages>
    +setLangs(ArrayList<Languages>):void
    +addLang(Languages):void
    +removeLang(Languages)void
}

class InfoScientist{
    -specialization:ArrayList<ScientistSpec>
    +InfoScientist(ArrayList<ScientistSpec>)
    +getSpecialization():ArrayList<ScientistSpec>
    +setSpecialization(ArrayList<ScientistSpec>):void
    +addSpec(ScientistSpec spec):void
    +removeSpec(ScientistSpec):void
    +getType():Enum<Specialty>
}

class InterviewController {
    #onCancelButton(ActionEvent):void
    #onOkButton(ActionEvent):void
}

class JobPostController extends TransitionController{
    #onCancelButton(ActionEvent):void
    #onApplyButton(ActionEvent):void
}


class MainController extends TransitionController{
    #onNewCompany(ActionEvent):void
    #onNewCandidate(ActionEvent):void
    #onNewJobPost(ActionEvent):void
    #onQuit(ActionEvent):void
    #onProfileLink(ActionEvent):void
    #onCompaniesSection(ActionEvent):void
    #onCandidatesSection(ActionEvent):void
    #onJobPotsSection(ActionEvent):void
    #onEntityLink(ActionEvent):void
    #onEditButton(ActionEvent):void
    #onDeleteButton(ActionEvent):void
    #onSearchButton()
}


class TransitionController {
    #transition(String, ActionEvent):void
}

Candidate"1..*" --* "1 "Agency
Company"1..*" --* "1 "Agency
JobPost"1..*" --* "1 "Agency
Interview"1..*" --* "1 "Agency

InfoHealth ..|> IAdditionalInfo
InfoScientist ..|> IAdditionalInfo
InfoTourism ..|> IAdditionalInfo
InfoTranslator ..|> IAdditionalInfo

Agency "1" --> "   1" Agency
Candidate"1" *-- "1..*"IAdditionalInfo
@enduml