@startuml
skinparam classAttributeIconSize 0
!pragma layout smetana

interface IDataBase<<interface>>{
    +getObject(String, String[]):Model
    +deleteObject(String):void
    +insertObject(Model):void

}
interface IAdditionalInfo <<interface>>{
    +getType():Enum
}

interface ICascadeDelete <<interface>>{
    +deleteNode():void
}
class Agency implements IDataBase{
    -models : ArrayList<Model>
    -single_instance : Agency
    -Agency()
    +create() : Agency
    +setModels(ArrayList<Model>)
    +getModels():ArrayList<Model>
    +getObject(String, String[]):Model
    +deleteObject(String):void
    +insertObject(Model):void
    +modelExists(String):boolean
    +getObjectList(String, OrderBy, HashMap<String, Object>):<ArrayList<Model>
    +gerObjectListIDs(String,OrderBy, HashMap<String, Object>):ArrayList<String>
    -order_ID(String):ArrayList<Model>
    -order_creationDate(String):ArrayList<Model>
    -filterOrderedList(HashMap<String, Object>, ArrayList<Model>):<ArrayList<Model>
}

class Model<<abstract>>{
    # id : String
    +Model(String)
    +getId():String
    +getType():String
    +setId(String):void
}

class Candidate extends Model{
    -String name
    -gender: Gender
    -address:String
    -phone:String
    -scholarship:Scholarship
    -specialty: Specialty
    -sector:Branch
    -additionalInfo:ArrayList<IAdditionalInfo>
    +Candidate(String,String,Gender,String,String,Scholarship,Specialty,Branch)
    +getName():String
    +setName():void
    +getGender():Gender
    +setGender():void
    +getAddress():String
    +setAddress():void
    +getPhone():String
    +setPhone():void
    +getScholarship():Scholarship
    +setScholarship():void
    +getSpecialty():Specialty
    +setSpecialty():void
    +getSector():Branch
    +setSector():void
    +getAdditionalInfo():ArrayList<IAdditionalInfo>
    +setId(String):void
    -dateValidationID(String):boolean
    -genderValidationID(String):boolean
    -phoneValidation(String):boolean
}

class Company extends Model implements ICascadeDelete{
    -name:String
    -address:String
    -phoneList:ArrayList<String>
    -sector:Branch
    -jobPostList:ArrayList<JobPost>
    +Company(String,String,String,String,Branch,ArrayList<JobPost>)
    +getName() :String
    +setName(String):void
    +getAddress():String
    +setAddress(String):void
    +getPhone():String
    +setPhone(String):void
    +getSector():Branch
    +setSector(Branch):void
    +getJobPostList():ArrayList<JobPost>
    +addJobPostToList(JobPost):void
    +setJobPostList(ArrayList<JobPost>):void
    +deleteNode():void
    -validatePhone(String):boolean
}


class Interview extends Model{
    -date:Date
    -candidate:String
    -company:String
    -jobPost:String
    +Interview(String, Date, String, String, String)
    +getDate():Date
    +setDate(Date):void
    +getCandidate():String
    +setCandidate(String):void
    +getCompany():String
    +setCompany(String):void
    +getJobPost():String
    +setJobPost(String):void
    -validateDate(Date):boolean
}

class JobPost extends Model implements ICascadeDelete{
    -branch:Branch
    -salary:float
    -status:Status
    -description:String
    -company:String
    -interviewList:ArrayList<String>
    -scholarship:Scholarship
    -specialty:Specialty
    +JobPost(String,Branch,float,Status,String,String,ArrayList<String>,Scholarship,Specialty)
    +getSpecialty():Specialty
    +setSpecialty(Specialty):void
    +getScholarship():Scholarship
    +setScholarship(Scholarship) :void
    +getBranch():Branch
    +setBranch(Branch):void
    +getSalary():float
    +setSalary(float):void
    +getStatus():Status
    +setStatus(Status):void
    +getDescription():String
    +setDescription(String):void
    +getCompany():String
    +setCompany(String):void
    +getInterviewList() :ArrayList<String>
    +setInterviewList(ArrayList<String>):void
    +addInterview(String):void
    deleteNode():void
}


class InfoDeveloper implements IAdditionalInfo{
    -languages:ArrayList<ProgrammingLang>
    +InfoDeveloper(ArrayList<ProgrammingLang>)
    +getLanguages():ArrayList<ProgrammingLang>
    +setLanguages(ArrayList<ProgrammingLang> languages):void
    +addLanguage(ProgrammingLang newLang):void
    +removeLanguage(ProgrammingLang lang):void
    +getType():Enum<Specialty>
}

class InfoDoctor implements IAdditionalInfo{
    -specialization:DoctorSpec
    +InfoDoctor(DoctorSpec)
    +getSpecialization():DoctorSpec
    +setSpecialization(DoctorSpec specialization):void
    +getType():Enum<Specialty>
}

class InfoEngineer implements IAdditionalInfo{
    -specialization:EngineerSpec
    +InfoEngineer(EngineerSpec)
    +getSpecialization():EngineerSpec
    +setSpecialization(EngineerSpec):void
    +getType() :Enum<Specialty>
}

class InfoHealth implements IAdditionalInfo{
    -hasCertificate:boolean
    +InfoHealth(boolean)
    +hasCertificate():boolean
    +setCertificate(boolean):void
    +getType():Enum<Branch>
}
class InfoTourism implements IAdditionalInfo{
    -hasLicence:boolean
    +InfoTourism(boolean)
    +hasLicence:boolean():boolean
    +setLicence(boolean):void
    +getType():Enum<Branch>
}

class InfoTranslator implements IAdditionalInfo{
    -langs:ArrayList<Languages>
    +InfoTranslator(ArrayList<Languages>)
    +getLangs():ArrayList<Languages>
    +setLangs(ArrayList<Languages>):void
    +addLang(Languages):void
    +removeLang(Languages)void
}

class InfoScientist implements IAdditionalInfo{
    -specialization:ArrayList<ScientistSpec>
    +InfoScientist(ArrayList<ScientistSpec>)
    +getSpecialization():ArrayList<ScientistSpec>
    +setSpecialization(ArrayList<ScientistSpec>):void
    +addSpec(ScientistSpec spec):void
    +removeSpec(ScientistSpec):void
    +getType():Enum<Specialty>
}

class InterviewController {
    #onCancelButton(ActionEvent):void
    #onOkButton(ActionEvent):void
}

class JobPostController extends TransitionController{
    #onCancelButton(ActionEvent):void
    #onApplyButton(ActionEvent):void
}

class LoginController extends TransitionController {
    #onLoginButton(ActionEvent):void
    #onSignUpLink(ActionEvent):void
}

class MainCandidatesController extends MainController {
    #onEntityLink(ActionEvent):void
    #onEditButton(ActionEvent):void
    #onDeleteButton(ActionEvent):void 
    #onSearchButton():void
}

class MainCompaniesController extends  MainController{
    #onEditButton(ActionEvent):void
    #onDeleteButton(ActionEvent):void
    #onEntityLink(ActionEvent):void
    #onSearchButton()
}
class MainController extends TransitionController{
    #onNewCompany(ActionEvent):void
    #onNewCandidate(ActionEvent):void
    #onNewJobPost(ActionEvent):void 
    #onQuit(ActionEvent):void
    #onProfileLink(ActionEvent):void
    #onCompaniesSection(ActionEvent):void
    #onCandidatesSection(ActionEvent):void
    #onJobPotsSection(ActionEvent):void
    #onEntityLink(ActionEvent):void
    #onEditButton(ActionEvent):void
    #onDeleteButton(ActionEvent):void 
    #onSearchButton()
}

class SignUpController extends TransitionController{
    #onSignUpButton(ActionEvent):void
    #onLoginLink(ActionEvent):void
}

class MainJobPostsController extends MainController {
    #onEntityLink(ActionEvent):void
    #onEditButton(ActionEvent):void
    #onDeleteButton(ActionEvent):void
    #onSearchButton():void
}

class TransitionController {
    #transition(String, ActionEvent):void
}
enum Branch <<enumeration>>{
    AGRICULTURE
    TOURISM
    HEALTH
    EDUCATION
    SERVICES
    INDUSTRY
}

enum DoctorSpec <<enumeration>>{
    ALLERGIST
    IMMUNOLOGIST
    DERMATOLOGIST
    RADIOLOGIST
    EMERGENCY_MED
    FAMILY_MED
    GENETICS
    NEUROLOGIST
    GYNECOLOGIST
    OPHTHALMOLOGIST
    PATHOLOGIST
    PREVENTIVE_MED
    REHAB_MED
    PSYCHIATRIST
    SURGEON
    UROLOGIST
}

enum EngineerSpec <<enumeration>>{
    CIVIL
    INDUSTRIAL
    BIOMEDICAL
    TELECOMMUNICATIONS
    INFORMATIC
    AUTOMATIC
    ELECTRONIC
    MECHANIC
}

enum Gender <<enumeration>>{
    MASCULINE
    FEMININE
}

enum Languages <<enumeration>>{
    AFRIKAANS
    ALBANIAN
    AMHARIC
    ARABIC
    ARMENIAN
    BASQUE
    BENGALI
    BELORUSSIAN
    BURMESE
    BULGARIAN
    CATALAN
    CHINESE
    CROATIAN
    DANISH
    DUTCH
    ENGLISH
    ESPERANTO
    ESTONIAN
    FARSI
    FINNISH
    FRENCH
    GAELIC
    GERMAN
    GREEK
    HEBREW
    HINDI
    HUNGARIAN
    ICELANDIC
    INDONESIAN
    ITALIAN
    JAPANESE
    KOREAN
    KURDISH
    LAOTIAN
    LATVIAN
    LITHUANIAN
    MACEDONIAN
    MALAY
    MALTESE
    NEPALI
    NORWEGIAN
    POLISH
    PORTUGUESE
    ROMANIAN
    RUSSIAN
    SCOTS
    SERBIAN
    SLOVAK
    SLOVENIAN
    SOMALI
    SPANISH
    SWEDISH
    SWAHILI
    TIBETAN
    TURKISH
    UKRAINIAN
    UZBEK
    VIETNAMESE
    WELSH
}

enum ProgrammingLang <<enumeration>>{
    PYTHON
    C
    CPP
    CSHARP
    JAVA
    GDSCRIPT
    PHP
    HTML
    CSS
    JS
    RUBY
    PERL
    RUST
    TYPESCRIPT
    SQL
}

enum Scholarship <<enumeration>>{
    BASIC
    GRADE
    MASTER
    PHD
}

enum ScientistSpec <<enumeration>>{
    ECOLOGY
    BIOLOGY
    CHEMISTRY
    MATHEMATICIAN
    MEDICAL_SCI
    PSYCHOLOGY
    GEOLOGY
    PALEONTOLOGY
    STATISTIC
    PHARMACOLOGY
    NEUROSCIENCE
    COMPUTER_SCI
    OCEANOGRAPHY
    MICROBIOLOGY
    PHYSICS
    FORENSIC
}

enum Specialty <<enumeration>>{
    ENGINEER
    DEVELOPER
    DOCTOR
    TRANSLATOR
    DESIGNER
    ARCHITECT
    SCIENTIST
    ECONOMIST
    ACCOUNTANT
    MANAGER
    CONSULTANT
    GUARD
}

enum  Status <<enumeration>>{
    OPEN
    APPLICATION_ACTIVE
    CLOSED
}

Candidate"1      " --> "1"Gender
Candidate"1" --> "1"Scholarship
Candidate"1" --> "     1"Specialty
Candidate"1   " --> "1 "Branch
InfoHealth"1  "--> "1 "Branch
InfoTourism"1  " --> "1 "Branch
JobPost"1 " --> "1  "Branch
JobPost"1" --> "1  "Status
JobPost"1"--> "1  "Scholarship
JobPost"1" --> "1  "Specialty
Company"1" --> "1      "Branch

InfoDeveloper"1" --> "1..* "ProgrammingLang
InfoTranslator"1" -->"1..* "Languages
InfoScientist"1" -->"1..* "ScientistSpec

InfoDoctor"1" --> "1 "DoctorSpec
InfoEngineer"1" --> "1 "EngineerSpec
Agency"1 " *--"1..*"Model
Agency "1" --> "   1" Agency
Candidate *-- IAdditionalInfo
@enduml